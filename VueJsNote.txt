### 起步
每个 Vue 应用都需要通过实例化 Vue 来实现。
语法格式如下：
var vm = new Vue({
  // 选项
})
实例
<div id="vue_det">
    <h1>site : {{site}}</h1>
    <h1>url : {{url}}</h1>
    <h1>{{details()}}</h1>
</div>
<script type="text/javascript">
    var vm = new Vue({
        //el 参数，它是 DOM 元素中的 id
        el: '#vue_det',
        //data 用于定义属性，实例中有三个属性分别为：site、url、alexa。
        data: {
            site: "菜鸟教程",
            url: "www.runoob.com",
            alexa: "10000"
        },
        //methods 用于定义的函数，可以通过 return 来返回函数值。
        methods: {
            details: function() {
                return  this.site + " - 学的不仅是技术，更是梦想！";
            }
        }
    })
</script>


### 实例属性
Vue 实例还提供了一些有用的实例属性与方法。它们都有前缀 $，以便与用户定义的属性区分开来
例：
// 我们的数据对象
var data = { site: "菜鸟教程", url: "www.runoob.com", alexa: 10000}
var vm = new Vue({
    el: '#vue_det',
    data: data
})

document.write(vm.$data === data) // true
document.write("<br>") // true
document.write(vm.$el === document.getElementById('vue_det')) // true

### 指令
v-bind 指令将该元素的属性与表达式的值绑定。
例：<a v-bind:href="url">菜鸟教程</a>
    <div v-bind:class="{'class1': class1}"></div>
    <div v-bind:id="'list-' + id">菜鸟教程</div>
    <!-- 缩写 -->
    <a :href="url"></a>

v-on 指令，监听事件，并对用户的输入进行响应。
例：<a v-on:click="doSomething">
    <!-- 缩写 -->
    <a @click="doSomething"></a>

v-model 指令来实现双向数据绑定.
例：<input v-model="message">

v-if 指令用于在表达式的值改变时，将某些行为应用到 DOM 上。
例：<p v-if="seen">现在你看到我了</p>

### 过滤器
Vue.js 允许你自定义过滤器，被用作一些常见的文本格式化。由"管道符"指示, 格式如下：
<!-- 在两个大括号中 -->
{{ message | capitalize }}
<!-- 在 v-bind 指令中 -->
<div v-bind:id="rawId | formatId"></div>
过滤器函数接受表达式的值作为第一个参数。
过滤器可以串联：
{{ message | filterA | filterB }}
过滤器是 JavaScript 函数，因此可以接受参数：
{{ message | filterA('arg1', arg2) }}
这里，message 是第一个参数，字符串 'arg1' 将传给过滤器作为第二个参数， arg2 表达式的值将被求值然后传给过滤器作为第三个参数。

### 条件
v-if 指令将根据表达式的值(true 或 false )来决定是否插入元素。
例：
<p v-if="seen">现在你看到我了</p>
<template v-if="ok">
  <h1>菜鸟教程</h1>
  <p>学的不仅是技术，更是梦想！</p>
  <p>哈哈哈，打字辛苦啊！！！</p>
</template>

v-else(v-else-if) 指令给 v-if 添加一个 "else" 块：
例：
<div id="app">
    <div v-if="type === 'A'">
      A
    </div>
    <div v-else-if="type === 'B'">
      B
    </div>
    <div v-else-if="type === 'C'">
      C
    </div>
    <div v-else>
      Not A/B/C
    </div>
</div>

v-show 指令来根据条件展示元素:
例：
<h1 v-show="ok">Hello!</h1>

v-show 与 v-if的区别：
v-if 是真实的条件渲染，因为它会确保条件块在切换当中合适地销毁与重建条件块内的事件监听器和子组件。
v-show 简单得多――元素始终被编译并保留，只是简单地基于 CSS 切换。
一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。

### 循环
v-for 指令需要以 site in sites 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名。可以提供第二个的参数为键名,第三个参数为索引（详情见Demo6）。
例：
<div id="app">
  <ol>
    <li v-for="site in sites">
      {{ site.name }}
    </li>
  </ol>
</div>
<script>
new Vue({
  el: '#app',
  data: {
    sites: [
      { name: 'Runoob' },
      { name: 'Google' },
      { name: 'Taobao' }
    ]
  }
})
</script>

### 计算属性
computed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter。
可以使用 methods 来替代 computed，效果上两个都是一样的，但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。