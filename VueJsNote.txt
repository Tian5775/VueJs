### 起步
每个 Vue 应用都需要通过实例化 Vue 来实现。
语法格式如下：
var vm = new Vue({
  // 选项
})
实例
<div id="vue_det">
    <h1>site : {{site}}</h1>
    <h1>url : {{url}}</h1>
    <h1>{{details()}}</h1>
</div>
<script type="text/javascript">
    var vm = new Vue({
        //el 参数，它是 DOM 元素中的 id
        el: '#vue_det',
        //data 用于定义属性，实例中有三个属性分别为：site、url、alexa。
        data: {
            site: "菜鸟教程",
            url: "www.runoob.com",
            alexa: "10000"
        },
        //methods 用于定义的函数，可以通过 return 来返回函数值。
        methods: {
            details: function() {
                return  this.site + " - 学的不仅是技术，更是梦想！";
            }
        }
    })
</script>


### 实例属性
Vue 实例还提供了一些有用的实例属性与方法。它们都有前缀 $，以便与用户定义的属性区分开来
例：
// 我们的数据对象
var data = { site: "菜鸟教程", url: "www.runoob.com", alexa: 10000}
var vm = new Vue({
    el: '#vue_det',
    data: data
})

document.write(vm.$data === data) // true
document.write("<br>") // true
document.write(vm.$el === document.getElementById('vue_det')) // true

### 指令
v-bind 指令将该元素的属性与表达式的值绑定。
例：<a v-bind:href="url">菜鸟教程</a>
    <div v-bind:class="{'class1': class1}"></div>
    <div v-bind:id="'list-' + id">菜鸟教程</div>
    <!-- 缩写 -->
    <a :href="url"></a>

v-on 指令，监听事件，并对用户的输入进行响应。
例：<a v-on:click="doSomething">
    <!-- 缩写 -->
    <a @click="doSomething"></a>

v-model 指令来实现双向数据绑定.
例：<input v-model="message">

v-if 指令用于在表达式的值改变时，将某些行为应用到 DOM 上。
例：<p v-if="seen">现在你看到我了</p>

### 过滤器
Vue.js 允许你自定义过滤器，被用作一些常见的文本格式化。由"管道符"指示, 格式如下：
<!-- 在两个大括号中 -->
{{ message | capitalize }}
<!-- 在 v-bind 指令中 -->
<div v-bind:id="rawId | formatId"></div>
过滤器函数接受表达式的值作为第一个参数。
过滤器可以串联：
{{ message | filterA | filterB }}
过滤器是 JavaScript 函数，因此可以接受参数：
{{ message | filterA('arg1', arg2) }}
这里，message 是第一个参数，字符串 'arg1' 将传给过滤器作为第二个参数， arg2 表达式的值将被求值然后传给过滤器作为第三个参数。