### 起步
每个 Vue 应用都需要通过实例化 Vue 来实现。
语法格式如下：
var vm = new Vue({
  // 选项
})
实例
<div id="vue_det">
    <h1>site : {{site}}</h1>
    <h1>url : {{url}}</h1>
    <h1>{{details()}}</h1>
</div>
<script type="text/javascript">
    var vm = new Vue({
        //el 参数，它是 DOM 元素中的 id
        el: '#vue_det',
        //data 用于定义属性，实例中有三个属性分别为：site、url、alexa。
        data: {
            site: "菜鸟教程",
            url: "www.runoob.com",
            alexa: "10000"
        },
        //methods 用于定义的函数，可以通过 return 来返回函数值。
        methods: {
            details: function() {
                return  this.site + " - 学的不仅是技术，更是梦想！";
            }
        }
    })
</script>


### 实例属性
Vue 实例还提供了一些有用的实例属性与方法。它们都有前缀 $，以便与用户定义的属性区分开来
例：
// 我们的数据对象
var data = { site: "菜鸟教程", url: "www.runoob.com", alexa: 10000}
var vm = new Vue({
    el: '#vue_det',
    data: data
})

document.write(vm.$data === data) // true
document.write("<br>") // true
document.write(vm.$el === document.getElementById('vue_det')) // true

### 指令
v-bind 指令将该元素的属性与表达式的值绑定。
例：<a v-bind:href="url">菜鸟教程</a>
    <div v-bind:class="{'class1': class1}"></div>
    <div v-bind:id="'list-' + id">菜鸟教程</div>
    <!-- 缩写 -->
    <a :href="url"></a>

v-on 指令，监听事件，并对用户的输入进行响应。
例：<a v-on:click="doSomething">
    <!-- 缩写 -->
    <a @click="doSomething"></a>

v-model 指令来实现双向数据绑定.
例：<input v-model="message">

v-if 指令用于在表达式的值改变时，将某些行为应用到 DOM 上。
例：<p v-if="seen">现在你看到我了</p>

### 过滤器
Vue.js 允许你自定义过滤器，被用作一些常见的文本格式化。由"管道符"指示, 格式如下：
<!-- 在两个大括号中 -->
{{ message | capitalize }}
<!-- 在 v-bind 指令中 -->
<div v-bind:id="rawId | formatId"></div>
过滤器函数接受表达式的值作为第一个参数。
过滤器可以串联：
{{ message | filterA | filterB }}
过滤器是 JavaScript 函数，因此可以接受参数：
{{ message | filterA('arg1', arg2) }}
这里，message 是第一个参数，字符串 'arg1' 将传给过滤器作为第二个参数， arg2 表达式的值将被求值然后传给过滤器作为第三个参数。

### 条件
v-if 指令将根据表达式的值(true 或 false )来决定是否插入元素。
例：
<p v-if="seen">现在你看到我了</p>
<template v-if="ok">
  <h1>菜鸟教程</h1>
  <p>学的不仅是技术，更是梦想！</p>
  <p>哈哈哈，打字辛苦啊！！！</p>
</template>

v-else(v-else-if) 指令给 v-if 添加一个 "else" 块：
例：
<div id="app">
    <div v-if="type === 'A'">
      A
    </div>
    <div v-else-if="type === 'B'">
      B
    </div>
    <div v-else-if="type === 'C'">
      C
    </div>
    <div v-else>
      Not A/B/C
    </div>
</div>

v-show 指令来根据条件展示元素:
例：
<h1 v-show="ok">Hello!</h1>

v-show 与 v-if的区别：
v-if 是真实的条件渲染，因为它会确保条件块在切换当中合适地销毁与重建条件块内的事件监听器和子组件。
v-show 简单得多――元素始终被编译并保留，只是简单地基于 CSS 切换。
一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。

### 循环
v-for 指令需要以 site in sites 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名。可以提供第二个的参数为键名,第三个参数为索引（详情见Demo6）。
例：
<div id="app">
  <ol>
    <li v-for="site in sites">
      {{ site.name }}
    </li>
  </ol>
</div>
<script>
new Vue({
  el: '#app',
  data: {
    sites: [
      { name: 'Runoob' },
      { name: 'Google' },
      { name: 'Taobao' }
    ]
  }
})
</script>

### 计算属性
computed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter。
可以使用 methods 来替代 computed，效果上两个都是一样的，但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。

### 监听属性
watch 会实时监听数据变化并改变自身的值

### 样式绑定
用 v-bind 来设置样式属性。
Vue.js v-bind 在处理 class 和 style 时， 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组。

### 事件处理器
事件监听可以使用 v-on 指令
事件修饰符
Vue.js 为 v-on 提供了事件修饰符来处理 DOM 事件细节，如：event.preventDefault() 或 event.stopPropagation()。
Vue.js通过由点(.)表示的指令后缀来调用修饰符。
<!-- 阻止单击事件冒泡 -->
<a v-on:click.stop="doThis"></a>
<!-- 提交事件不再重载页面 -->
<form v-on:submit.prevent="onSubmit"></form>
<!-- 修饰符可以串联  -->
<a v-on:click.stop.prevent="doThat"></a>
<!-- 只有修饰符 -->
<form v-on:submit.prevent></form>
<!-- 添加事件侦听器时使用事件捕获模式 -->
<div v-on:click.capture="doThis">...</div>
<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->
<div v-on:click.self="doThat">...</div>
<!-- click 事件只能点击一次，2.1.4版本新增 -->
<a v-on:click.once="doThis"></a>

### 表单
v-model 指令在表单控件元素上创建双向数据绑定。
修饰符
.lazy：转变为在 change 事件中同步
.number：自动将用户的输入值转为 Number 类型
.trim：自动过滤用户输入的首尾空格

### 组件(自定义元素)
组件可以扩展 HTML 元素，封装可重用的代码
注册一个全局组件语法格式如下：
Vue.component(tagName, options)
使用 $on(eventName) 监听事件
使用 $emit(eventName) 触发事件

### 自定义指令
除了默认设置的核心指令( v-model 和 v-show ), Vue 也允许注册自定义指令。
指令定义函数提供了几个钩子函数（可选）：
    bind: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。
    inserted: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。
    update: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。
    componentUpdated: 被绑定元素所在模板完成一次更新周期时调用。
    unbind: 只调用一次， 指令与元素解绑时调用。
钩子函数的参数有：
el: 指令所绑定的元素，可以用来直接操作 DOM 。
    binding: 一个对象，包含以下属性：
        name: 指令名，不包括 v- 前缀。
        value: 指令的绑定值， 例如： v-my-directive="1 + 1", value 的值是 2。
        oldValue: 指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。
        expression: 绑定值的字符串形式。 例如 v-my-directive="1 + 1" ， expression 的值是 "1 + 1"。
        arg: 传给指令的参数。例如 v-my-directive:foo， arg 的值是 "foo"。
        modifiers: 一个包含修饰符的对象。 例如： v-my-directive.foo.bar, 修饰符对象 modifiers 的值是 { foo: true, bar: true }。
    vnode: Vue 编译生成的虚拟节点。
    oldVnode: 上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。
实例:
    <div id="app"  v-runoob:hello.a.b="message">
    </div>
     <script>
    Vue.directive('runoob', {
      bind: function (el, binding, vnode) {
        var s = JSON.stringify
        el.innerHTML =
          'name: '       + s(binding.name) + '<br>' +
          'value: '      + s(binding.value) + '<br>' +
          'expression: ' + s(binding.expression) + '<br>' +
          'argument: '   + s(binding.arg) + '<br>' +
          'modifiers: '  + s(binding.modifiers) + '<br>' +
          'vnode keys: ' + Object.keys(vnode).join(', ')
      }
    })
    new Vue({
      el: '#app',
      data: {
        message: '菜鸟教程!'
      }
    })
    </script>